plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.node-gradle.node' version '7.1.0'
}

group = 'com.pacs'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation("org.apache.tomcat.embed:tomcat-embed-jasper:11.0.7")
}

// 2. Node.js 및 Webpack 설정
node {
    // 프로젝트에서 사용할 Node.js 버전. 로컬에 없으면 자동으로 다운로드 및 설치됩니다.
    version = '22.14.0'
    // npm 버전을 지정할 수도 있습니다.
    npmVersion = '10.9.2'
    // true로 설정하면 시스템에 설치된 Node.js를 사용합니다.
    download = true
    // 프론트엔드 소스 코드가 있는 디렉토리
    workDir = file("${project.projectDir}/frontend")
    // npm install 명령어를 실행할 디렉토리
    npmWorkDir = file("${project.projectDir}/frontend")
}

// 3. npm run build를 실행할 Gradle 태스크 정의
task webpackBuild(type: Exec) {
    // 1. 작업 디렉토리를 frontend 폴더로 지정
    workingDir "${project.projectDir}/frontend"

    // 2. 실행할 명령어 지정 (Windows와 Mac/Linux 호환)
    commandLine isWindows() ? 'npm.cmd' : 'npm', 'run', 'build'

    // 표준 출력을 Gradle의 표준 출력에 연결합니다. (빌드 과정 로그)
    standardOutput = System.out
    // 표준 에러를 Gradle의 표준 에러에 연결합니다. (에러 메시지)
    errorOutput = System.err
}

// Windows 운영체제인지 확인하는 함수 추가
boolean isWindows() {
    return System.getProperty('os.name').toLowerCase().contains('windows')
}

// 4. Gradle의 processResources 태스크가 webpackBuild 태스크에 의존하도록 설정
// 이렇게 하면 Java 리소스를 처리하기 전에 항상 Webpack 빌드가 먼저 실행됩니다.
processResources.dependsOn(webpackBuild)

tasks.named('test') {
	useJUnitPlatform()
}
